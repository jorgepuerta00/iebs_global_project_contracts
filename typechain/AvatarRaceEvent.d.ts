/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AvatarRaceEventInterface extends ethers.utils.Interface {
  functions: {
    "createRace(uint256,uint256[])": FunctionFragment;
    "endMatch(uint256,uint256[])": FunctionFragment;
    "enterRacerInRace(uint256,uint256)": FunctionFragment;
    "getMatchStatus(uint256)": FunctionFragment;
    "getRaceResults(uint256)": FunctionFragment;
    "isEndedMatch(uint256)": FunctionFragment;
    "nftToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "races(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startMatch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRace",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "endMatch",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRacerInRace",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaceResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEndedMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nftToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "races", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createRace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterRacerInRace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMatchStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaceResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEndedMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "races", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "MatchEnded(uint256,uint256[])": EventFragment;
    "MatchStarted(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RaceCreated(uint256,uint256,uint256,uint256[])": EventFragment;
    "RacerEnteredMatch(uint256,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MatchEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RacerEnteredMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type MatchEndedEvent = TypedEvent<
  [BigNumber, BigNumber[]] & { raceId: BigNumber; winningIds: BigNumber[] }
>;

export type MatchStartedEvent = TypedEvent<[BigNumber] & { raceId: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RaceCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[]] & {
    raceId: BigNumber;
    entryFee: BigNumber;
    numWinners: BigNumber;
    prizeDistribution: BigNumber[];
  }
>;

export type RacerEnteredMatchEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    raceId: BigNumber;
    avatarOwner: string;
    nftId: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class AvatarRaceEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AvatarRaceEventInterface;

  functions: {
    createRace(
      _entryFee: BigNumberish,
      _prizeDistribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endMatch(
      _raceId: BigNumberish,
      _winningIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterRacerInRace(
      _raceId: BigNumberish,
      _nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMatchStatus(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    getRaceResults(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isEndedMatch(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    nftToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    races(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        raceId: BigNumber;
        entryFee: BigNumber;
        totalPrizePool: BigNumber;
        numWinners: BigNumber;
        minParticipants: BigNumber;
        active: boolean;
        started: boolean;
        ended: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startMatch(
      _raceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createRace(
    _entryFee: BigNumberish,
    _prizeDistribution: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endMatch(
    _raceId: BigNumberish,
    _winningIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterRacerInRace(
    _raceId: BigNumberish,
    _nftId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMatchStatus(
    _raceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRaceResults(
    _raceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isEndedMatch(
    _raceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  races(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      raceId: BigNumber;
      entryFee: BigNumber;
      totalPrizePool: BigNumber;
      numWinners: BigNumber;
      minParticipants: BigNumber;
      active: boolean;
      started: boolean;
      ended: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startMatch(
    _raceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createRace(
      _entryFee: BigNumberish,
      _prizeDistribution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    endMatch(
      _raceId: BigNumberish,
      _winningIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    enterRacerInRace(
      _raceId: BigNumberish,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMatchStatus(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRaceResults(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isEndedMatch(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    races(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        raceId: BigNumber;
        entryFee: BigNumber;
        totalPrizePool: BigNumber;
        numWinners: BigNumber;
        minParticipants: BigNumber;
        active: boolean;
        started: boolean;
        ended: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startMatch(_raceId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MatchEnded(uint256,uint256[])"(
      raceId?: null,
      winningIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { raceId: BigNumber; winningIds: BigNumber[] }
    >;

    MatchEnded(
      raceId?: null,
      winningIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { raceId: BigNumber; winningIds: BigNumber[] }
    >;

    "MatchStarted(uint256)"(
      raceId?: null
    ): TypedEventFilter<[BigNumber], { raceId: BigNumber }>;

    MatchStarted(
      raceId?: null
    ): TypedEventFilter<[BigNumber], { raceId: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RaceCreated(uint256,uint256,uint256,uint256[])"(
      raceId?: null,
      entryFee?: null,
      numWinners?: null,
      prizeDistribution?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber[]],
      {
        raceId: BigNumber;
        entryFee: BigNumber;
        numWinners: BigNumber;
        prizeDistribution: BigNumber[];
      }
    >;

    RaceCreated(
      raceId?: null,
      entryFee?: null,
      numWinners?: null,
      prizeDistribution?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber[]],
      {
        raceId: BigNumber;
        entryFee: BigNumber;
        numWinners: BigNumber;
        prizeDistribution: BigNumber[];
      }
    >;

    "RacerEnteredMatch(uint256,address,uint256)"(
      raceId?: null,
      avatarOwner?: null,
      nftId?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { raceId: BigNumber; avatarOwner: string; nftId: BigNumber }
    >;

    RacerEnteredMatch(
      raceId?: null,
      avatarOwner?: null,
      nftId?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { raceId: BigNumber; avatarOwner: string; nftId: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    createRace(
      _entryFee: BigNumberish,
      _prizeDistribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endMatch(
      _raceId: BigNumberish,
      _winningIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterRacerInRace(
      _raceId: BigNumberish,
      _nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMatchStatus(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaceResults(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEndedMatch(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    races(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startMatch(
      _raceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRace(
      _entryFee: BigNumberish,
      _prizeDistribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endMatch(
      _raceId: BigNumberish,
      _winningIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterRacerInRace(
      _raceId: BigNumberish,
      _nftId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMatchStatus(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaceResults(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEndedMatch(
      _raceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    races(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startMatch(
      _raceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
